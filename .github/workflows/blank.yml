name: pipeline to deploy website

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      EC2_URL: ${{ secrets.EC2_URL }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      APP_ADMIN_USERNAME: ${{ secrets.APP_ADMIN_USERNAME }}
      APP_ADMIN_PASSWORD: ${{ secrets.APP_ADMIN_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Setup SSH key
      - name: Setup SSH key
        run: |
          printf '%s\n' "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # 3️⃣ Test SSH connection and create hello-world file
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_URL }} \
          "echo 'SSH Connected ✅' && echo 'hello-world' >> ~/new_file.txt"

      # 4️⃣ Clone or pull project on EC2
      - name: Clone project on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_URL }} "
            if [ ! -d ~/project ]; then
              git clone https://github.com/srinivasarao3234/workflow-testing.git ~/project;
            else
              cd ~/project && git pull;
            fi
          "

      # 5️⃣ Install Docker Compose v2 on EC2 (optional)
      - name: Install Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_URL }} "
            sudo mkdir -p /usr/local/lib/docker/cli-plugins &&
            curl -SL https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64 -o docker-compose &&
            sudo mv docker-compose /usr/local/lib/docker/cli-plugins/docker-compose &&
            sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose &&
            docker compose version
          "

      # 6️⃣ Upload .env file with secrets to EC2
      - name: Upload .env file to EC2
        run: |
          echo "APP_ADMIN_USERNAME=${{ secrets.APP_ADMIN_USERNAME }}" > .env
          echo "APP_ADMIN_PASSWORD=${{ secrets.APP_ADMIN_PASSWORD }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          scp -o StrictHostKeyChecking=no -i private_key.pem .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_URL }}:~/project/.env

      # 7️⃣ Set up Docker Buildx on GitHub runner (needed for building images)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # 8️⃣ Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 9️⃣ Run Docker Compose on EC2 (optional: comment out for testing)
      - name: Run Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_URL }} "
            cd ~/project &&
            docker compose --env-file .env up --build -d &&
            docker ps -a
          "
